#include<iostream>
#include<algorithm>

#define MAX_N 30

using namespace std;

//global variables
int N;
int T;
int arr[MAX_N];

int sol_cnt = MAX_N+1; //how many elements are used in the optimal solution
bool sol_used[MAX_N] = { false };

int main() {
	
	while (cin >> N) {
		////	PART 0: initialize	////
		sol_cnt = MAX_N+1;
		for (int i = 0; i < N; i++) {
			sol_used[i] = false;
		}
		////	PART 1: input	////
		for (int i = 0; i < N; i++) {
			cin >> arr[i];
		}
		cin >> T;

		////	PART 2: enumerate all combinations	////
		//cout << (1 << N) << endl;
		for (int i = 0; i < (1 << N); i++) {
			int temp_sum = 0;
			int temp_cnt = 0;
			bool temp_used[MAX_N] = { false };
			for (int j = 0; j < N; j++) {
				if (i >> j & 1) { //use arr[j]
					temp_cnt++;
					temp_used[j] = true;
					temp_sum += arr[j];
				}
			}
			if (temp_sum == T) {
				if (temp_cnt < sol_cnt) {
					sol_cnt = temp_cnt;
					for (int k = 0; k < N; k++) {
						sol_used[k] = temp_used[k];
					}
				}
			}
		}
		////	PART 3: Output	////
		for (int i = 0; i < N; i++) {
			if (sol_used[i]) {
				cout << i << " ";
			}
		}
		if (sol_cnt == MAX_N + 1) {
			cout << "impossible";
		}
		cout << endl;
	}
	
}
